---
title: "Introducing shinystate"
subtitle: "Launching Shiny collaboration to new heights"
author: 
  - name: Eric Nantz
    affiliation:
      - Statistician / Developer / Podcaster
      - Eli Lilly & Company
      - "{{< fa brands bluesky >}} [@rpodcast.bsky.social](https://bsky.app/profile/rpodcast.bsky.social)"
      - "{{< fa brands mastodon >}} [@rpodcast@podcastindex.social](https://podcastindex.social/@rpodcast)"
      - "{{< fa brands linkedin >}} [@eric-nantz](https://www.linkedin.com/in/eric-nantz-6621617/)"
date: September 17, 2025
format:
  revealjs:
    auto-play-media: true
    link-external-newwindow: true
    menu: true
    code-line-numbers: false
    theme: [default, custom.scss]
    footer: "[rpodcast.github.io/shinystate-positconf2025/](https://rpodcast.github.io/shinystate-positconf2025/)"
---

## {background-image="assets/img/collaboration_meeting.jpg" background-size="contain"}

::: {.absolute left="1%" top="0%" style="font-size:1.5em; padding: 0.1em 0.2em; background-color: rgba(255, 255, 255, .5); backdrop-filter: blur(5px); box-shadow: 0 0 1rem 0 rgba(0, 0, 0, .5); border-radius: 5px;"}
High-stakes Collaboration
:::

::: footer
:::

::: {.notes}

* Need the answer quickly, but with all of these voices it can be overwhelming
* Get to the answer quickly, frantically toggling the settings
:::

## Complex Applications

![](assets/img/large_app.png)

::: {.footer}
[RadaR Application](https://shiny.posit.co/r/gallery/life-sciences/hospital-data-antimicrobial/)
:::


::: {.notes}

* Radar app (Christian Luz)
* Complex apps with many inputs, toggles, that take more than one session to complete

:::


## 

::: {.qrdiv}
{{< qrcode https://shiny.posit.co/r/articles/share/bookmarking-state/ width=400 height=400 colorDark='#0011bb' >}}
:::

:::: {.columns}

::: {.column width="70%"}

![](assets/img/bookmark_state_article_blurred.png)

:::

::: {.column width="30%"}

* Capture state of application and restore at later point
* Not quite everything I needed ...

:::

::::

::: footer
[Bookmarkable State Introduction](https://shiny.posit.co/r/articles/share/bookmarking-state/)
:::

::: {.notes}

* Feature landed in version 0.14 in 2016
* Two methods: URL bookmarking and server-side bookmarking
* For smaller applications, this may be good enough

:::

---

:::: {.columns}

::: {.column width="50%" .fragment}

### URL Method

`myapp.com/?_inputs_&_n=200&text=abc&....`

![](assets/img/metroid_password.webp){width=120%}

:::

::: {.column width="50%" .fragment}

### Server-side Method

Store as files in hosting server

<br>

![](assets/img/storage_safe.svg){width=80%}

:::

::::


## {background-image="assets/img/rpharma_joe_cheng.jpg" background-size="contain"}

::: footer
[R/Pharma 2018 - rinpharma.com](https://rinpharma.com)
:::

::: {.notes}

* Joe Cheng - keynote at R/Pharma 2018 (Using interactivity responsibly in pharma)
* https://rinpharma.com/publication/rinpharma_32/
* Very slight customizatoins to bookmarkable state that got my creative juices flowing

:::


## Enter `{shinystate}` ![](assets/img/hex.png){width="10%" style="vertical-align: middle;"} 

Supercharge Shiny's Bookmarkable-state capability with key enhancements

* Granular control over storage location
* Capability to add optional metadata
* Object-oriented methods with `{R6}`

## Enable `shinystate` 

::: {style="font-size: 1.1em"}
```{.r code-line-numbers="|3|5|7,9|15|19"}
library(shiny)
library(bslib)
library(shinystate)

storage <- StorageClass$new()

ui <- function(request) {
  page_sidebar(
    use_shinystate(),
    # additional UI code
  )
}

server <- function(input, output, session) {
  storage$register_metadata()
  # additonal server logic
}

shinyApp(ui, server, enableBookmarking = "server")
```
:::

::: {.notes}
* `StorageClass$new()` initializes the R6 class for your shinystate bookmark sessions
* By default, a temporary directory is used to store bookmarkable state files
* `use_shinystate()` injects required JavaScript bindings
* `storage$register_metadata()` handles registering custom `shiny::onBookmarked` callback
:::

## Saving Bookmarkable State üíæ

::: {style="font-size: 1.4em" .fragment}
```{.r}
storage$snapshot(
  metadata = list(
    save_name = "exploring",
    timestamp = Sys.time()
  )
)
```
:::

::: {.fragment}

::: {style="font-size: 0.7em"}
```{r}
#| echo: false
session_df <- readRDS("assets/r_files/session_df.rds")
knitr::kable(session_df)
```
:::

:::

::: {style="font-size: 0.8em" .fragment}
* `url`: Mapping to unique ID of session
* Optional: list of metadata values
:::

::: {.notes}
* `storage$snapshot()` performs the bookmarking snapshot, wrapping `session$doBookmark()`. But you get to include optional metadata as a named list!
:::


## Restoring Bookmarkable State üìÇ

::: {style="font-size: 1.4em"}
```{.r code-line-numbers="|1|2-4|6|"}
session_df <- storage$get_sessions()
url <- session_df |>
  dplyr::filter(save_name == "exploring") |>
  dplyr::pull(url)

storage$restore(url)
```
:::

::: {.notes}
* `storage$restore()` loads the supplied bookmark state session by the custom url
:::



## Storage with `{pins}` ![](assets/img/pins.png){width="8%" style="vertical-align: middle;"} 

:::: {.columns}

::: {.column width="50%"}

![](assets/img/puzzly_sharing.svg)

:::

::: {.column width="50%"}

* Control **where** you store bookmarkable state files
* Leverages [custom format](https://pins.rstudio.com/articles/managing-custom-formats.html) capability

:::

::::

::: {style="font-size: 1.5em" .fragment}
```{.r}
board <- pins::board_s3("awesome-bucket")
storage <- StorageClass$new(board_sessions = board)
```
:::

::: footer
[pins.rstudio.com](https://pins.rstudio.com/)
:::

::: {.notes}

Example pins board providers:
* Posit Connect
* S3 Object Storage (S3, Azure)
* Google Drive / Dropbox / OneDrive
* Online site (GitHub repo)
:::

## Power-up: Sharing Sessions

:::: {.columns}

::: {.column width="50%" .fragment}

::: {style="text-align:center;"}
![Dr. Light](assets/img/dr_light.png){width="50%"}
:::

:::

::: {.column width="50%" .fragment}

::: {style="text-align:center;"}
![Dr. Wily](assets/img/dr_wily.png){width="70%"}
:::

:::

::::

---

{{< video assets/img/megaman_app_light.mp4 >}}

---

{{< video assets/img/megaman_app_wily.mp4 >}}

## Additional Benefits ü§î

* Custom processing of session state artifacts
* Traceability _within_ and _across_ user sessions
* Inputs to automated reporting

## Current and Future Work

‚úÖ Example applications from basic usage to Shiny modules

‚úÖ Package website with interactive apps powered by WebAssembly!

‚è≥ CRAN submission (in queue)

üõ† Compatability with `{golem}` and `{rhino}`

## Relief in Sight {background-image="assets/img/roundabout_china_traffic.webp" background-size='60%'}

## Thank You!

:::: {.columns}

::: {.column width=60%}

::: {style="font-size: 0.7em"}

üì¶ **Documentation**:

[rpodcast.github.io/shinystate](https://rpodcast.github.io/shinystate/)

üì¶ **GitHub Repository**:

[github.com/rpodcast/shinystate](https://github.com/rpodcast/shinystate)

üè° **Slides**: 

[rpodcast.github.io/shinystate-positconf2025](https://rpodcast.github.io/shinystate-positconf2025/)

:::

![](assets/img/rpodcast-hexagon.png){width="20%"}

:::

::: {.column width=40%}

::: {style="font-size: 0.7em"}

**Let's Connect!**

{{< fa solid microphone size=xl >}} [R-Podcast](https://r-podcast.org)

{{< fa solid microphone size=xl >}} [R Weekly Highlights](https://serve.podhome.fm/r-weekly-highlights)

{{< fa solid display >}} [Shiny Developer Series](https://shinydevseries.com)

{{< fa brands mastodon size=xl >}} [\@rpodcast](https://podcastindex.org/@rpodcast)

{{< fa brands bluesky size=xl >}} [\@rpodcast](https://bsky.app/profile/rpodcast.bsky.social)

{{< fa brands linkedin size=xl >}} [eric-nantz](https://www.linkedin.com/in/eric-nantz-6621617/)

{{< fa brands github size=xl >}} [rpodcast](https://github.com/rpodcast/)
:::

:::

::::
